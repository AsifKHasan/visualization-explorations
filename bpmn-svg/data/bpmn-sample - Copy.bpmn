/*
# this is bpmn DSL, it starts with keyword bpmn (case matters in our DSL) and an identifier for the graph
# this is pretty much close to GraphViz's dot language
# _ is a special keyword for specifying properties for the scope and its children, scopes are nested like graph --> lane --> pool --> task cells etc.
# properties are always inside [] and are key value pairs
# TODO: this .bpmn can be generated with the following command line
# TODO: node generate_bpmn.js [-s path-to-styleheet.css] [-r html|svg|png] [-o path-to-output.[html|svg|png]] path-to-input.bpmn

Lanes are A-Z, Pools are 1-9 within a lane, Nodes are a-z within a pool

1. to parse the bpmn only, run
    python bpmn-parser.py < ../data/bpmn-sample.bpmn > ../out/bpmn-sample.json
    it will generate json output at ../out/bpmn-sample.json

2. to parse the bpmn and generate the svg, run
    python bpmn-parser.py < ../data/bpmn-sample.bpmn | tee ../out/bpmn-sample.json | python bpmn-to-svg.py
    it will generate svg output at ../out/bpmn-sample.svg

3. to generate svg from an existing parsed json (generated by bpmn-parser.py), run
    python bpmn-to-svg.py < ../out/bpmn-sample.json
    it will generate svg output at ../out/bpmn-sample.svg

Note:   This template will produce parse error unless you change the node types (like A1a, B2c etc.) to a valid one.
        For valid node types see *NodeType* definitions in *tokenize* method *specs* in bpmn-parser.py

Note:   For valid edge syntax see *EdgeOp* definitions in *tokenize* method *specs* in bpmn-parser.py
*/
graph bpmn_sample {
    label = "BPMN Sample"

    lane events {
        label = "All Events"
        pool starts_1 {
            label = "Start Events 1"

            start                       start01 [label="New award/publication";]
            startCompensation           start02 [label="Start Compensation";]
            startConditional            start03 [label="Start Conditional";]
            startConditionalNon         start04 [label="Start Conditional Non";]
            startEscalation             start05 [label="Start Escalation";]
            startEscalationNon          start06 [label="Start Escalation Non";]
        }
        pool starts_2 {
            label = "Start Events 2"

            startError                  start07 [label="Start Error";]
            startMessage                start08 [label="Start Message";]
            startMessageNon             start09 [label="Start Message Non";]
            startMultiple               start10 [label="Start Multiple";]
            startMultipleNon            start11 [label="Start Multiple Non";]
        }
        pool starts_3 {
            label = "Start Events 3"

            startParallelMultiple       start12 [label="Start Parallel Multiple";]
            startParallelMultipleNon    start13 [label="Start Parallel Multiple Non";]
            startSignal                 start14 [label="Start Signal";]
            startSignalNon              start15 [label="Start Signal Non";]
            startTimer                  start16 [label="Start Timer";]
            startTimerNon               start17 [label="Start Timer Non";]
        }
        pool ends_1 {
            label = "End Events 1"

            end              end1 [label="End";]
            endCancel        end2 [label="End Cancel";]
            endCompensate    end3 [label="End Compensate";]
            endError         end4 [label="End Error";]
            endEscalation    end5 [label="End Escalation";]
        }
        pool ends_2 {
            label = "End Events 2"

            endMessage       end6 [label="End Message";]
            endMultiple      end7 [label="End Multiple";]
            endSignal        end8 [label="End Signal";]
            endTerminate     end9 [label="End Terminate";]
        }
        pool intermediates_1 {
            label = "Intermediate Events 1"

            intermediate                intermediate01 [label="Intermediate";]
            catchCancel                 intermediate02 [label="Intermediate Catch Cancel";]
            catchCompensation           intermediate03 [label="Intermediate Catch Compensation";]
            throwCompensation           intermediate04 [label="Intermediate Throw Compensation";]
            catchError                  intermediate05 [label="Intermediate Catch Error";]
        }
        pool intermediates_2 {
            label = "Intermediate Events 2"

            catchEscalation             intermediate06 [label="Intermediate Catch Escalation";]
            catchEscalationNon          intermediate07 [label="Intermediate Catch Escalation Non";]
            throwEscalation             intermediate08 [label="Intermediate Throw Escalation";]
            catchLink                   intermediate09 [label="Intermediate Catch Link";]
            throwLink                   intermediate10 [label="Intermediate Throw Link";]
        }
        pool intermediates_3 {
            label = "Intermediate Events 3"

            catchMessage                intermediate11 [label="Intermediate Catch Message";]
            catchMessageNon             intermediate12 [label="Intermediate Catch Message Non";]
            throwMessage                intermediate13 [label="Intermediate Throw Message";]
            catchMultiple               intermediate14 [label="Intermediate Catch Multiple";]
            catchMultipleNon            intermediate15 [label="Intermediate Catch Multiple Non";]
            throwMultiple               intermediate16 [label="Intermediate Throw Multiple";]
        }
        pool intermediates_4 {
            label = "Intermediate Events 4"

            catchParallelMultiple       intermediate17 [label="Intermediate Catch ParallelMultiple";]
            catchParallelMultipleNon    intermediate18 [label="Intermediate Catch ParallelMultiple Non";]
            catchSignal                 intermediate19 [label="Intermediate Catch Signal";]
            catchSignalNon              intermediate20 [label="Intermediate Catch Signal Non";]
            throwSignal                 intermediate21 [label="Intermediate Throw Signal";]
        }
        pool intermediates_5 {
            label = "Intermediate Events 5"

            conditional                 intermediate22 [label="Intermediate conditional";]
            conditionalNon              intermediate23 [label="Intermediate conditional Non";]
            timer                       intermediate24 [label="Intermediate Timer";]
            timerNon                    intermediate25 [label="Intermediate Timer Non";]
        }
    }
    lane gateways {
        label = "All Gateways"
        pool gateways {
            label = "Gateways"

            exclusive                   gateway01 [label="Exclusive";]
            inclusive                   gateway02 [label="Inclusive";]
            parallel                    gateway03 [label="Parallel";]
            complex                     gateway04 [label="Complex";]
            eventBased                  gateway05 [label="Event Based";]
            eventBasedStart             gateway06 [label="Event Based Start";]
            eventBasedParallelStart     gateway07 [label="Event Based Parallel Start";]
        }
    }
}
